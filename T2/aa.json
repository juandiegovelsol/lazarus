{
  "programming_language": ["JavaScript"],
  "install_commands": ["npm i"],
  "run_commands": ["npm run dev"],
  "output": "",
  "output_expected": "yes",
  "output_mime_type": "application/octet-stream",
  "stream_source": "stdout",
  "code": [
    {
      "name": "App.jsx",
      "content": "import React, { useState } from \"react\";\nimport MonthSelectorController from \"./MonthSelectorController\";\nimport DeviceFormController from \"./DeviceFormController\";\nimport DeviceTableController from \"./DeviceTableController\";\nimport TableFooter from \"./TableFooter\";\nimport ExportButtonController from \"./ExportButtonController\";\nimport ImportButtonController from \"./ImportButtonController\";\n\nfunction App() {\n  const [devices, setDevices] = useState([]);\n  const [selectedMonth, setSelectedMonth] = useState(\"January\");\n  const [kWhCost, setKWhCost] = useState(0);\n\n  const months = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  const handleAddDevice = (newDevice) => {\n    setDevices([...devices, newDevice]);\n  };\n\n  const totalMonthlykWh = devices\n    .filter((device) => device.month === selectedMonth)\n    .reduce((total, device) => {\n      return (\n        total + (device.energy * device.hours * device.quantity * 30) / 1000\n      );\n    }, 0);\n\n  return (\n    <div>\n      <h1>Home Energy Calculator</h1>\n      <MonthSelectorController\n        months={months}\n        selectedMonth={selectedMonth}\n        setSelectedMonth={setSelectedMonth}\n      />\n      <DeviceFormController\n        onAddDevice={handleAddDevice}\n        selectedMonth={selectedMonth}\n      />\n      <h2>{selectedMonth} Device List</h2>\n      <DeviceTableController devices={devices} selectedMonth={selectedMonth} />\n      <TableFooter\n        totalMonthlykWh={totalMonthlykWh}\n        kWhCost={kWhCost}\n        setKWhCost={setKWhCost}\n      />\n      <ExportButtonController devices={devices} kWhCost={kWhCost} />\n      <ImportButtonController devices={devices} setDevices={setDevices} />\n    </div>\n  );\n}\n\nexport default App;"
    },
    {
      "name": "ImportButtonController.jsx",
      "content": "import React, { useState } from \"react\";\nimport ImportButtonView from \"./ImportButtonView\";\n\nconst ImportButtonController = ({ devices, setDevices }) => {\n  const [selectedFile, setSelectedFile] = useState(null);\n\n  const handleFileChange = (event) => {\n    setSelectedFile(event.target.files[0]);\n  };\n\n  const handleImport = () => {\n    if (!selectedFile) return;\n\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const csvData = event.target.result;\n      const rows = csvData.split(\"\\n\");\n      const headers = rows.shift().split(\",\");\n\n      const importedDevices = rows.map((row) => {\n        const deviceData = row.split(\",\");\n        return {\n          month: deviceData[0],\n          name: deviceData[1],\n          energy: parseFloat(deviceData[2]),\n          hours: parseFloat(deviceData[3]),\n          quantity: parseInt(deviceData[4], 10),\n        };\n      });\n\n      const updatedDevices = devices.slice();\n      importedDevices.forEach((importedDevice) => {\n        const existingDevice = updatedDevices.find(\n          (device) =>\n            device.month === importedDevice.month &&\n            device.name === importedDevice.name\n        );\n\n        if (existingDevice) {\n          if (importedDevice.energy && !existingDevice.energy) {\n            existingDevice.energy = importedDevice.energy;\n          }\n          if (importedDevice.hours && !existingDevice.hours) {\n            existingDevice.hours = importedDevice.hours;\n          }\n          if (importedDevice.quantity && !existingDevice.quantity) {\n            existingDevice.quantity = importedDevice.quantity;\n          }\n        } else {\n          updatedDevices.push(importedDevice);\n        }\n      });\n\n      setDevices(updatedDevices);\n    };\n\n    reader.readAsText(selectedFile);\n  };\n\n  return (\n    <ImportButtonView\n      handleFileChange={handleFileChange}\n      handleImport={handleImport}\n    />\n  );\n};\n\nexport default ImportButtonController;"
    },
    {
      "name": "ImportButtonView.jsx",
      "content": "import React from \"react\";\n\nconst ImportButtonView = ({ handleFileChange, handleImport }) => {\n  return (\n    <div>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleImport}>Import from CSV</button>\n    </div>\n  );\n};\n\nexport default ImportButtonView;"
    },
    {
      "name": "ExportButtonController.jsx",
      "content": "import React from \"react\";\nimport ExportButtonView from \"./ExportButtonView\";\n\nconst ExportButtonController = ({ devices, kWhCost }) => {\n  const handleExport = () => {\n    const csvData = devices.map((device) => {\n      const deviceEnergy =\n        (device.energy * device.hours * device.quantity * 30) / 1000;\n      return [\n        device.month,\n        device.name,\n        device.energy,\n        device.hours,\n        device.quantity,\n        deviceEnergy,\n        kWhCost,\n        (kWhCost * deviceEnergy).toFixed(2),\n      ].join(\",\");\n    });\n\n    const csvHeader =\n      \"Month,Device Name,Energy (Wh),Hours/Day,Quantity,Monthly Energy (KWh),Energy Cost($/KWh), Device Consumption Cost ($)\";\n    const csvContent = csvHeader + \"\\n\" + csvData.join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"energy_data.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  return <ExportButtonView handleExport={handleExport} />;\n};\n\nexport default ExportButtonController;"
    },
    {
      "name": "ExportButtonView.jsx",
      "content": "import React from \"react\";\n\nconst ExportButtonView = ({ handleExport }) => {\n  return <button onClick={handleExport}>Export to CSV</button>;\n};\n\nexport default ExportButtonView;"
    },
    {
      "name": "DeviceFormController.jsx",
      "content": "import React, { useState } from \"react\";\nimport DeviceFormView from \"./DeviceFormView\";\n\nconst DeviceFormController = ({ onAddDevice, selectedMonth }) => {\n  const [deviceName, setDeviceName] = useState(\"\");\n  const [energy, setEnergy] = useState(\"\");\n  const [hours, setHours] = useState(\"\");\n  const [quantity, setQuantity] = useState(\"\");\n\n  const handleAddDevice = (event) => {\n    event.preventDefault();\n\n    const newDevice = {\n      name: deviceName,\n      energy: parseFloat(energy),\n      hours: parseFloat(hours),\n      quantity: parseInt(quantity, 10),\n      month: selectedMonth,\n    };\n\n    onAddDevice(newDevice);\n\n    setDeviceName(\"\");\n    setEnergy(\"\");\n    setHours(\"\");\n    setQuantity(\"\");\n  };\n\n  return (\n    <DeviceFormView\n      handleAddDevice={handleAddDevice}\n      deviceName={deviceName}\n      setDeviceName={setDeviceName}\n      energy={energy}\n      setEnergy={setEnergy}\n      hours={hours}\n      setHours={setHours}\n      quantity={quantity}\n      setQuantity={setQuantity}\n    />\n  );\n};\n\nexport default DeviceFormController;"
    },
    {
      "name": "DeviceFormView.jsx",
      "content": "import React from \"react\";\n\nconst DeviceFormView = ({\n  handleAddDevice,\n  deviceName,\n  setDeviceName,\n  energy,\n  setEnergy,\n  hours,\n  setHours,\n  quantity,\n  setQuantity,\n}) => {\n  return (\n    <form onSubmit={handleAddDevice}>\n      <div>\n        <label htmlFor=\"deviceName\">Device Name:</label>\n        <input\n          type=\"text\"\n          id=\"deviceName\"\n          name=\"deviceName\"\n          value={deviceName}\n          onChange={(e) => setDeviceName(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"energy\">Energy Consumption (Wh):</label>\n        <input\n          type=\"number\"\n          id=\"energy\"\n          name=\"energy\"\n          value={energy}\n          onChange={(e) => setEnergy(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"hours\">Daily Hours of Use:</label>\n        <input\n          type=\"number\"\n          id=\"hours\"\n          name=\"hours\"\n          value={hours}\n          onChange={(e) => setHours(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"quantity\">Quantity:</label>\n        <input\n          type=\"number\"\n          id=\"quantity\"\n          name=\"quantity\"\n          value={quantity}\n          onChange={(e) => setQuantity(e.target.value)}\n          required\n        />\n      </div>\n      <button type=\"submit\">Add Device</button>\n    </form>\n  );\n};\n\nexport default DeviceFormView;"
    },
    {
      "name": "DeviceTableController.jsx",
      "content": "import React from \"react\";\nimport DeviceTableView from \"./DeviceTableView\";\n\nconst DeviceTableController = ({ devices, selectedMonth }) => {\n  const calculateMonthlyEnergy = (device) => {\n    const dailyWh = device.energy * device.hours * device.quantity;\n    const monthlyWh = dailyWh * 30;\n    const monthlykWh = monthlyWh / 1000;\n    return monthlykWh.toFixed(2);\n  };\n\n  const filteredDevices = devices.filter(\n    (device) => device.month === selectedMonth\n  );\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Device Name</th>\n          <th>Energy (Wh)</th>\n          <th>Hours/Day</th>\n          <th>Quantity</th>\n          <th>Monthly Energy (KWh)</th>\n        </tr>\n      </thead>\n      <tbody>\n        <DeviceTableView\n          devices={filteredDevices}\n          calculateMonthlyEnergy={calculateMonthlyEnergy}\n        />\n      </tbody>\n    </table>\n  );\n};\n\nexport default DeviceTableController;"
    },
    {
      "name": "DeviceTableView.jsx",
      "content": "import React from \"react\";\n\nconst DeviceTableView = ({ devices, calculateMonthlyEnergy }) => {\n  return (\n    <>\n      {devices.map((device, index) => (\n        <tr key={index}>\n          <td>{device.name}</td>\n          <td>{device.energy}</td>\n          <td>{device.hours}</td>\n          <td>{device.quantity}</td>\n          <td>{calculateMonthlyEnergy(device)}</td>\n        </tr>\n      ))}\n    </>\n  );\n};\n\nexport default DeviceTableView;"
    },
    {
      "name": "MonthSelectorController.jsx",
      "content": "import React, { useState } from \"react\";\nimport MonthSelectorView from \"./MonthSelectorView\";\n\nconst MonthSelectorController = ({\n  months,\n  selectedMonth,\n  setSelectedMonth,\n}) => {\n  const handleMonthSelect = (month) => {\n    setSelectedMonth(month);\n  };\n\n  return (\n    <MonthSelectorView\n      selectedMonth={selectedMonth}\n      handleMonthSelect={handleMonthSelect}\n      months={months}\n    />\n  );\n};\n\nexport default MonthSelectorController;\n"
    },
    {
      "name": "MonthSelectorView.jsx",
      "content": "import React from \"react\";\n\nconst MonthSelectorView = ({ selectedMonth, handleMonthSelect, months }) => {\n  return (\n    <select\n      value={selectedMonth}\n      onChange={(e) => handleMonthSelect(e.target.value)}\n    >\n      {months.map((month) => (\n        <option key={month} value={month}>\n          {month}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport default MonthSelectorView;"
    },
    {
      "name": "TableFooter.jsx",
      "content": "import React, { useState } from \"react\";\n\nconst TableFooter = ({ totalMonthlykWh, kWhCost, setKWhCost }) => {\n  return (\n    <tfoot>\n      <tr>\n        <td colSpan=\"4\">Total Monthly Energy Consumption:</td>\n        <td>{totalMonthlykWh.toFixed(2)} kWh</td>\n      </tr>\n      <tr>\n        <td colSpan=\"4\">kWh Cost:</td>\n        <td>\n          <input\n            type=\"number\"\n            value={kWhCost}\n            onChange={(e) => setKWhCost(parseFloat(e.target.value))}\n          />\n        </td>\n      </tr>\n      <tr>\n        <td colSpan=\"4\">Estimated Total Monthly Cost:</td>\n        <td>${(totalMonthlykWh * kWhCost).toFixed(2)}</td>\n      </tr>\n    </tfoot>\n  );\n};\n\nexport default TableFooter;"
    }
  ]
}
