{
  "programming_language": ["HTML", "CSS", "JS"],
  "install_commands": ["npm i"],
  "run_commands": ["node index.js"],
  "output": "",
  "output_expected": "yes",
  "output_mime_type": "application/octet-stream",
  "stream_source": "",
  "code": [
    {
      "name": "index.html",
      "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Weather Dashboard</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n    <table id=\"weather-table\">\n        <thead>\n            <tr>\n                <th>City</th>\n                <th>Temperature (\u00b0C)</th>\n                <th>Wind Speed (km/h)</th>\n            </tr>\n        </thead>\n        <tbody id=\"weather-data\"></tbody>\n    </table>\n\n    <script src=\"script.js\"></script>\n</body>\n\n</html>"
    },
    {
      "name": "index.js",
      "content": "const http = require(\"http\");\nconst fs = require(\"fs\");\nconst axios = require(\"axios\");\nconst port = 3000;\n\nconst cities = [\n  { name: \"New York\", latitude: 40.7128, longitude: -74.006 },\n  { name: \"Los Angeles\", latitude: 34.0522, longitude: -118.2437 },\n  { name: \"Chicago\", latitude: 41.8781, longitude: -87.6298 },\n  { name: \"Miami\", latitude: 25.7617, longitude: -80.1918 },\n  { name: \"Austin\", latitude: 30.2672, longitude: -97.7431 },\n];\n\nlet weatherData = {};\nlet nextUpdate = Date.now();\n\nasync function getWeatherData(city) {\n  const response = await axios.get(\n    `https://api.open-meteo.com/v1/forecast?latitude=${city.latitude}&longitude=${city.longitude}&current_weather=true`\n  );\n  return {\n    city: city.name,\n    temperature: response.data.current_weather.temperature,\n    windSpeed: response.data.current_weather.windspeed,\n  };\n}\n\nasync function updateWeatherData() {\n  const weatherPromises = cities.map(getWeatherData);\n  weatherData = await Promise.all(weatherPromises);\n  const groupedData = weatherData.reduce(\n    (acc, result) => {\n      if (result.temperature > 25) {\n        acc.hot.push(result);\n      } else if (result.temperature > 15) {\n        acc.medium.push(result);\n      } else {\n        acc.cold.push(result);\n      }\n      return acc;\n    },\n    { hot: [], medium: [], cold: [] }\n  );\n  fs.writeFileSync(\"weather-data.json\", JSON.stringify(groupedData, null, 2));\n  nextUpdate = Date.now() + 600000; // Update every 10 minutes\n}\n\n// Update the weather data every 10 minutes\nsetInterval(updateWeatherData, 600000);\nupdateWeatherData();\n\nhttp\n  .createServer((req, res) => {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    if (req.url === \"/\") {\n      fs.readFile(\"index.html\", (err, data) => {\n        if (err) {\n          res.writeHead(404);\n          res.end(\"Error: File not found\");\n        } else {\n          res.writeHead(200, { \"Content-Type\": \"text/html\" });\n          res.end(data);\n        }\n      });\n    } else if (req.url === \"/script.js\") {\n      fs.readFile(\"script.js\", (err, data) => {\n        if (err) {\n          res.writeHead(404);\n          res.end(\"Error: File not found\");\n        } else {\n          res.writeHead(200, { \"Content-Type\": \"application/javascript\" });\n          res.end(data);\n        }\n      });\n    } else if (req.url === \"/styles.css\") {\n      fs.readFile(\"styles.css\", (err, data) => {\n        if (err) {\n          res.writeHead(404);\n          res.end(\"Error: File not found\");\n        } else {\n          res.writeHead(200, { \"Content-Type\": \"text/css\" });\n          res.end(data);\n        }\n      });\n    } else if (req.url === \"/weather-data\") {\n      res.writeHead(200, { \"Content-Type\": \"application/json\" });\n      res.end(\n        JSON.stringify({\n          data: weatherData,\n          nextUpdate: nextUpdate,\n        })\n      );\n    }\n  })\n  .listen(port, () => {\n    console.log(`Server running on port ${port}`);\n  });"
    },
    {
      "name": "script.js",
      "content": "const weatherTable = document.getElementById(\"weather-table\");\nconst weatherData = document.getElementById(\"weather-data\");\n\nlet nextUpdate = null;\n\nasync function getWeatherData() {\n  const response = await fetch(\"http://localhost:3000/weather-data\");\n  const data = await response.json();\n  nextUpdate = data.nextUpdate;\n  return data.data;\n}\n\nasync function updateWeatherTable() {\n  const weatherResults = await getWeatherData();\n\n  // Clear the existing table data\n  weatherData.innerHTML = \"\";\n\n  // Sort the weather data by temperature in descending order\n  weatherResults.sort((a, b) => b.temperature - a.temperature);\n\n  // Add the new table data\n  weatherResults.forEach((result) => {\n    const row = document.createElement(\"tr\");\n    const cityCell = document.createElement(\"td\");\n    const temperatureCell = document.createElement(\"td\");\n    const windSpeedCell = document.createElement(\"td\");\n\n    cityCell.textContent = result.city;\n    temperatureCell.textContent = `${result.temperature}\u00b0C`;\n    windSpeedCell.textContent = `${result.windSpeed} km/h`;\n\n    // Set the background color of the temperature cell based on the temperature\n    if (result.temperature > 25) {\n      temperatureCell.style.background = \"red\";\n    } else if (result.temperature > 15) {\n      temperatureCell.style.background = \"yellow\";\n    } else {\n      temperatureCell.style.background = \"blue\";\n    }\n\n    row.appendChild(cityCell);\n    row.appendChild(temperatureCell);\n    row.appendChild(windSpeedCell);\n    weatherData.appendChild(row);\n  });\n\n  // Schedule the next update\n  setTimeout(updateWeatherTable, nextUpdate - Date.now() + 15000);\n}\n\nupdateWeatherTable();"
    },
    {
      "name": "styles.css",
      "content": "table {\n  border-collapse: collapse;\n  width: 100%;\n}\n\nth, td {\n  border: 1px solid #ddd;\n  padding: 10px;\n  text-align: left;\n}\n\nth {\n  background-color: #f0f0f0;\n}"
    },
    {
      "name": "package.json",
      "content": "{\n  \"name\": \"1b\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"axios\": \"^1.7.7\"\n  }\n}"
    }
  ]
}
